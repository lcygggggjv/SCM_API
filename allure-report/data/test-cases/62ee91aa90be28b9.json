{"uid":"62ee91aa90be28b9","name":"新增物料全部用例","fullName":"scm_api.material_api.test_material.TestMaterial#test_create_material","historyId":"6ca9b86c614df2c53208f634db4cb000","time":{"start":1693576091735,"stop":1693576092401,"duration":666},"description":"新增物料通用数据","descriptionHtml":"<p>新增物料通用数据</p>\n","status":"failed","statusMessage":"AssertionError: 断言失败：预期结果：BAD_USER_INPUT, 不符合实际结果:MATERIAL_NO_IS_EXIST","statusTrace":"expected = 'BAD_USER_INPUT', actual = 'MATERIAL_NO_IS_EXIST'\n\n    @staticmethod\n    def assert_actual(expected, actual):\n    \n        try:\n>           assert expected in actual\nE           AssertionError\n\nscm_api\\base_api.py:59: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <scm_api.material_api.test_material.TestMaterial object at 0x00000147AAD70DF0>, get_token = 'meBhqMBr9Fwfoi0kwJ93pZuzKI0bV5T6'\ncase = {'data': {'category_id': 'category_id', 'code': '', 'material_type': 'PURCHASE', 'name': 'name', ...}, 'expected': 'BAD_USER_INPUT'}\nget_data = ('894b1ca8-fe1a-4483-b4c7-229f21b6422e', '4f328956-fe20-4a87-8129-e011542de156', '78b506b5-81c1-4523-9469-79436543a481', 'f400255e-5165-421e-b9d6-d90f44804b5c')\n\n    @allure.title('新增物料全部用例')\n    @pytest.mark.parametrize(\"case\", create_cases)\n    def test_create_material(self, get_token, case, get_data):\n        \"\"\"新增物料通用数据\"\"\"\n    \n        category_id, unit_id, signal_id = None, None, None\n    \n        if case['data']['category_id'] == 'category_id':\n            category_id = get_data[0]\n        if case['data']['unit_id'] == 'unit_id':\n            unit_id = get_data[1]\n        if case['data']['signal_id'] == 'signal_id':\n            signal_id = get_data[2]\n    \n        if case[\"data\"][\"code\"] == 'code':\n            code = self.mock.ran_py_str()\n        else:\n            code = case[\"data\"][\"code\"]\n    \n        if case[\"data\"][\"name\"] == \"name\":\n            name = self.mock.ran_py_str()\n        else:\n            name = case[\"data\"][\"name\"]\n    \n        res = requests.post(url=self.url + 'createScmMaterial',\n                            headers={\"Authorization\": f\"bearer {get_token}\"},\n                            json={\n                              \"operationName\": \"createScmMaterial\",\n                              \"variables\": {\n                                \"input\": {\n                                  \"category\": {\n                                    \"id\": category_id\n                                  },\n                                  \"figureNo\": self.mock.ran_py_str(),\n                                  \"inventoryUnit\": {\n                                    \"id\": unit_id\n                                  },\n                                  \"materialQuality\": self.mock.ran_py_str(),\n                                  \"materialSignal\": {\n                                    \"id\": signal_id\n                                  },\n                                  \"materialType\": case[\"data\"][\"material_type\"],\n                                  \"model\": self.mock.ran_py_str(),\n                                  \"name\": name,\n                                  \"no\": code,\n                                  \"specification\": self.mock.ran_py_str()\n                                }\n                              },\n                              \"query\": \"mutation createScmMaterial($input: CreateScmMaterialInput!) \"\n                                       \"{\\n  createScmMaterial(input: $input)\\n}\"\n                            })\n    \n        res = res.json()\n        expected = case['expected']\n    \n        actual = self.review_actual(res)\n>       self.assert_actual(expected, actual)\n\nscm_api\\material_api\\test_material.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpected = 'BAD_USER_INPUT', actual = 'MATERIAL_NO_IS_EXIST'\n\n    @staticmethod\n    def assert_actual(expected, actual):\n    \n        try:\n            assert expected in actual\n    \n            logger.info(f\"断言成功：预期结果：{expected}, 符合实际结果:{actual}\")\n        except AssertionError:\n            error_msg = f\"断言失败：预期结果：{expected}, 不符合实际结果:{actual}\"\n            logger.error(error_msg)\n>           raise AssertionError(error_msg)\nE           AssertionError: 断言失败：预期结果：BAD_USER_INPUT, 不符合实际结果:MATERIAL_NO_IS_EXIST\n\nscm_api\\base_api.py:65: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1693576084561,"stop":1693576084683,"duration":122},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_token","time":{"start":1693576088578,"stop":1693576088868,"duration":290},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_data","time":{"start":1693576088868,"stop":1693576091735,"duration":2867},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"afterStages":[{"name":"get_data::0","time":{"start":1693576092560,"stop":1693576092560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false},{"name":"get_token::0","time":{"start":1693576092568,"stop":1693576092568,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"scm_api.material_api"},{"name":"suite","value":"test_material"},{"name":"subSuite","value":"TestMaterial"},{"name":"host","value":"LAPTOP-GID304T1"},{"name":"thread","value":"6436-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"scm_api.material_api.test_material"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'data': {'code': '', 'name': 'name', 'category_id': 'category_id', 'material_type': 'PURCHASE', 'unit_id': 'unit_id', 'signal_id': 'signal_id'}, 'expected': 'BAD_USER_INPUT'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"62ee91aa90be28b9.json","parameterValues":["{'data': {'code': '', 'name': 'name', 'category_id': 'category_id', 'material_type': 'PURCHASE', 'unit_id': 'unit_id', 'signal_id': 'signal_id'}, 'expected': 'BAD_USER_INPUT'}"]}