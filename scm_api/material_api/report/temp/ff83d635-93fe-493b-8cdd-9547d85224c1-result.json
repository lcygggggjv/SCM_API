{"name": "新增物料全部用例", "status": "failed", "statusDetails": {"message": "AssertionError: \u001b[1;31m断言失败：预期结果：BAD_USER_INPUT, 不符合实际结果:{'createScmMaterial': '218691ce-27d2-4401-8a9c-54bf791c3eea'}\u001b[0m", "trace": "expected = 'BAD_USER_INPUT'\nactual = {'createScmMaterial': '218691ce-27d2-4401-8a9c-54bf791c3eea'}\n\n    @staticmethod\n    def assert_actual(expected, actual):\n    \n        try:\n>           assert expected in actual\nE           AssertionError\n\n..\\base_api.py:59: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <scm_api.material_api.test_material.TestMaterial object at 0x000002178937B010>\nget_token = 'IVnUONHMklIyb9wup7Xb5q2Macnl7TcL'\ncase = {'data': {'category_id': 'category_id', 'code': 'code', 'material_type': 'PURCHASE', 'name': '', ...}, 'expected': 'BAD_USER_INPUT'}\nget_data = ('224bc3aa-5c92-4e85-9abf-1b7df8d17851', 'f18d4ed4-71be-4d85-9554-aac7c6c50717', '78a27602-1ef0-4734-92cd-46d90361d5f0', '75efb6e2-88e1-4c1a-b91d-862263f2e767')\n\n    @allure.title('新增物料全部用例')\n    @pytest.mark.parametrize(\"case\", create_cases)\n    def test_create_material(self, get_token, case, get_data):\n        \"\"\"新增物料通用数据\"\"\"\n    \n        category_id, unit_id, signal_id = None, None, None\n    \n        if case['data']['category_id'] == 'category_id':\n            category_id = get_data[0]\n        if case['data']['unit_id'] == 'unit_id':\n            unit_id = get_data[1]\n        if case['data']['signal_id'] == 'signal_id':\n            signal_id = get_data[2]\n    \n        if case[\"data\"][\"code\"] == 'code':\n            code = self.mock.ran_py_str()\n        else:\n            code = case[\"data\"][\"code\"]\n    \n        if case[\"data\"][\"name\"] == \"name\":\n            name = self.mock.ran_py_str()\n        else:\n            name = case[\"data\"][\"name\"]\n    \n        res = requests.post(url=self.url + 'createScmMaterial',\n                            headers={\"Authorization\": f\"bearer {get_token}\"},\n                            json={\n                              \"operationName\": \"createScmMaterial\",\n                              \"variables\": {\n                                \"input\": {\n                                  \"category\": {\n                                    \"id\": category_id\n                                  },\n                                  \"figureNo\": self.mock.ran_py_str(),\n                                  \"inventoryUnit\": {\n                                    \"id\": unit_id\n                                  },\n                                  \"materialQuality\": self.mock.ran_py_str(),\n                                  \"materialSignal\": {\n                                    \"id\": signal_id\n                                  },\n                                  \"materialType\": case[\"data\"][\"material_type\"],\n                                  \"model\": self.mock.ran_py_str(),\n                                  \"name\": name,\n                                  \"no\": code,\n                                  \"specification\": self.mock.ran_py_str()\n                                }\n                              },\n                              \"query\": \"mutation createScmMaterial($input: CreateScmMaterialInput!) \"\n                                       \"{\\n  createScmMaterial(input: $input)\\n}\"\n                            })\n    \n        res = res.json()\n        expected = case['expected']\n    \n        actual = self.review_actual(res)\n>       self.assert_actual(expected, actual)\n\ntest_material.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpected = 'BAD_USER_INPUT'\nactual = {'createScmMaterial': '218691ce-27d2-4401-8a9c-54bf791c3eea'}\n\n    @staticmethod\n    def assert_actual(expected, actual):\n    \n        try:\n            assert expected in actual\n    \n            logger.info(f\"断言成功：预期结果：{expected}, 符合实际结果：{actual}\")\n        except AssertionError:\n            error_msg = f\"\\033[1;31m断言失败：预期结果：{expected}, 不符合实际结果:{actual}\\033[0m\"\n            logger.error(error_msg)\n>           raise AssertionError(error_msg)\nE           AssertionError: \u001b[1;31m断言失败：预期结果：BAD_USER_INPUT, 不符合实际结果:{'createScmMaterial': '218691ce-27d2-4401-8a9c-54bf791c3eea'}\u001b[0m\n\n..\\base_api.py:65: AssertionError"}, "description": "新增物料通用数据", "parameters": [{"name": "case", "value": "{'data': {'code': 'code', 'name': '', 'category_id': 'category_id', 'material_type': 'PURCHASE', 'unit_id': 'unit_id', 'signal_id': 'signal_id'}, 'expected': 'BAD_USER_INPUT'}"}], "start": 1694266356889, "stop": 1694266358041, "uuid": "80783a92-e3da-49ca-ac38-5546ee591023", "historyId": "47137d52acb684694d6566a6b0e2a115", "testCaseId": "1feea0c0b441f6997e486f4c1040fc4c", "fullName": "scm_api.material_api.test_material.TestMaterial#test_create_material", "labels": [{"name": "parentSuite", "value": "scm_api.material_api"}, {"name": "suite", "value": "test_material"}, {"name": "subSuite", "value": "TestMaterial"}, {"name": "host", "value": "LAPTOP-GID304T1"}, {"name": "thread", "value": "16144-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scm_api.material_api.test_material"}]}